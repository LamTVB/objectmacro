/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.1/userguide/java_library_plugin.html
 */

plugins {
    id "de.undercouch.download" version "3.2.0"
    id "java-library"
    id "java"
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}
sourceSets{
    main {
        java {
            srcDirs = ['src']
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'org.sablecc.ObjectMacro'
    }
}
import de.undercouch.gradle.tasks.download.Download
import org.gradle.api.GradleException

def libDir = "lib"

task downloadSablecc(type: Download){
    File sablecc = file("${libDir}/sablecc-3.7.zip")
    if(!sablecc.exists()) {
        src 'https://downloads.sourceforge.net/project/sablecc/SableCC/3.7/sablecc-3.7.zip'
        dest file('lib')
    }else{
        throw new GradleException("Sablecc zip already exist")
    }
}

task unzipSablecc(type: Copy, dependsOn: downloadSablecc){
    def zipFile = file("lib/sablecc-3.7.zip")

    from zipTree(zipFile)
    into libDir
}

task copyJar(type: Copy, dependsOn: unzipSablecc){
    from "${libDir}/sablecc-3.7/lib/sablecc.jar"
    into libDir

    doLast{
        delete "${libDir}/sablecc-3.7"
        delete "${libDir}/sablecc-3.7.zip"
    }
}

task generateObjectMacroAST(type : JavaExec) {
    main="-jar"
    args = [
            "lib/sablecc.jar",
            "grammars/objectmacro.sablecc",
            "-d",
            "src"
    ]
}

task generateIntermediateAST(type : JavaExec) {
    main="-jar"
    args = [
            "lib/sablecc.jar",
            "grammars/objectmacro.intermediate.sablecc",
            "-d",
            "src"
    ]
}

task run(type: JavaExec){
    main = "-cp"
    args = [buildDir, "org.sablecc.ObjectMacro"]

    if(project.hasProperty("macroFile")){
        args[2] = project.getProperty("macroFile");
    }
}

task copyGeneratedClasses(type: Copy){
    from "${buildDir}/classes/java/main"
    into buildDir

    doLast{
        delete "${buildDir}/classes"
    }
}

task copyDats(type: Copy){
    dependsOn copyGeneratedClasses

    from "${sourceSets.main.java.srcDirs[0]}"
    into buildDir
    include "org/**"

    doLast{
        delete fileTree(dir: "${buildDir}/org/" , include: '**/*.java')
    }
}

//Relations between tasks to setup the env

compileJava.dependsOn generateIntermediateAST
compileJava.dependsOn generateObjectMacroAST

//Relations between tasks to compile and run objectmacro

build.finalizedBy(copyDats)

check << {
    def sableccFile = file("lib/sablecc.jar")

    if(!sableccFile.exist()){
        dependsOn copyJar
    }
}

